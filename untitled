/**
 * Occupant file for Project 3
 *
 * @author Michael Murdock
 * @version Project 2
 * @version CPE102-11
 * @version Spring 2015
 */
import java.lang.Object;
import java.awt.event.KeyEvent;


public class Explorer extends Occupant
{
	private String name;
	private Maze maze;

	public Explorer(Square location, Maze maze, String name)
	{
		super(location);
		this.name=name;
		this.maze=maze;
		maze.lookAround(location);
	}

	public String name()
	{
		return name;
	}

	public void move(int key)
	{
		int rows=maze.rows();
		int cols=maze.cols();
		Square square= this.location();
		boolean moving=true;

		while(moving)
		{

			if (key>=37 && key<=40 && key>=224 && key<=227)
			{
				if (square.wall(3)==false)
				{
					if (super.location().row()!=0)
						if(key==37 || key==226) //left arrow key
						{
							if(super.location().wall(Square.LEFT)==false)
							{
								moveTo(maze.getSquare(super.location().row(), super.location().col()-1));
								moving=false;
							}
						}
				}

				if (square.wall(0))
				{
					if (super.location().col()!=0)
					{
						if(key==38 || key==224) //up arrow key
						{
							if(super.location().wall(Square.UP)==false)
							{
								moveTo(maze.getSquare(super.location().row()-1, super.location().col()));
								moving=false;
							}
						}	
					}
				}

				if (square.wall(1))
				{
					if (super.location().row()!=maze.rows())
					{
						if(key==KeyEvent.VK_RIGHT || key==227) //right arrow key
						{
							if(super.location().wall(Square.RIGHT)==false)
							{
								moveTo(maze.getSquare(super.location().row(), super.location().col()+1));
								moving=false;
							}
						}
					}
				}

				if(square.wall(2))
				{
					if (super.location().col()!=maze.cols())
					{
						if(key==40 || key==225) //down arrow key
						{
							if(super.location().wall(Square.DOWN)==false)
							{

								moveTo(maze.getSquare(super.location().row()+1, super.location().col()));
								moving=false;
							}		
						}
					}
				}
					
			}

		}




class yolo
{
		int rows=maze.rows();
		int cols=maze.cols();
		Square square= this.location();
		boolean moving=true;

		while(moving)
		{
			int x=rand.nextInt(4);

			if (x==0) //up
			{
				if(square.wall(0)==false)
				{
					if (square.row()!=0)
					{
						moveTo(maze.getSquare(square.row()-1, square.col()));
						moving=false;
					}
				}
			}
			if(x==1) //right
			{
				if(square.wall(1)==false)
				{
					if (square.col()!=maze.cols())
					{
						moveTo(maze.getSquare(square.row(), square.col()+1));
						moving=false;
					}
				}
			}
			if(x==2) //down
			{
				if(square.wall(2)==false)
				{
					if (square.row()!=maze.rows())
					{
						moveTo(maze.getSquare(square.row()+1, square.col()));
						moving=false;
					}
				}
			}
			if(x==3) //left
			{
				if(square.wall(3)==false)
				{
					if (square.col()!=0)
					{
						moveTo(maze.getSquare(square.row(), square.col()-1));
						moving=false;
					}
				}
			}
		}
	}

}
}